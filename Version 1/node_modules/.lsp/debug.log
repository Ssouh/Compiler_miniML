Hello - from /Users/marc/.vscode/extensions/jaredly.reason-vscode-1.7.13/bin.native
Previous log location: /var/folders/qg/jhsqgyj54y7cf_s1d4_khpzc0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml","languageId":"ocaml","version":1,"text":"(* Analyseur sémantique *)\n\nopen Ast\n\n(* ======================================================== *)\n(* Définition du type des erreurs *)\ntype errorType =\n  | UnknownIdentError of string (* Identificateur non défini *)\n  | TypeMismatchError           (* Erreur de type *)\n  | RuntimeError                (* Erreur à l'exécution *)\n  | UndefinedExpressionError    (* Expression non définie à traiter par les étudiants *)\n\n(* ======================================================== *)\n(* Définition du type des valeurs renvoyées par l'interprète *)\ntype valueType =\n  | FrozenValue of (ast * environment)        (* Fermeture fonctionnelle *)\n  | IntegerValue of int                       (* Valeur entière *)\n  | BooleanValue of bool                      (* Valeur booléenne *)\n  | ErrorValue of errorType                   (* Valeur représentant une erreur *)\nand environment = (string * valueType) list   (* Environnement d'exécution *)\n\n\n(* ========================================================*)\n(* string_of_names : string list -> string *)\n(* Converti une liste de chaînes de caractères en une seule chaîne de caractères *)\nlet string_of_names names =\n  List.fold_right (fun t tq -> t ^ \" \" ^ tq ) names \"\"\n\n(* string_of_env : environment -> string *)\n(* Convertit un environnement en une chaine de caractères en vue de son affichage *)\nlet rec string_of_env env =\n  match env with\n  | [] -> \"\"\n  | (key,value)::q -> (key ^ \",\" ^ (string_of_value value)) ^ \";\" ^ (string_of_env q)\n                    \n(* string_of_value : valueType -> string *)\n(* Convertit une valueType en une chaine de caractères en vue de son affichage *)\nand string_of_value value =\n  match value with\n  | (FrozenValue (expr,env)) -> ((string_of_ast expr) ^ (string_of_env env))\n  | (IntegerValue value) -> (string_of_int value)\n  | (BooleanValue value) -> (if (value) then \"true\" else \"false\")\n  | (ErrorValue error) -> (string_of_error error)\n                        \n(* string_of_error : errorType -> string *)\n(* Convertit une erreur en une chaine de caractères en vue de son affichage *)\nand string_of_error error =\n  match error with\n  | (UnknownIdentError name) -> \"Unknown ident : \" ^ name\n  | RuntimeError -> \"Runtime error\"\n  | TypeMismatchError -> \"Type mismatch\"\n  | UndefinedExpressionError -> \"Undefined expression error\"\n\n(* ========================================================*)\ntype 'a searchResult = \n  | NotFound \n  | Found of 'a\n\n(* lookfor : string -> environment -> valueType searchResult *)\n(* Cherche un identifiant dans un environnement et renvoie la valeur associée le cas échéant *)\nlet rec lookfor name env =\n  match env with\n  | [] -> NotFound\n  | (key,value) :: others ->\n    (if (key = name) then (Found value) else (lookfor name others))\n  \n(* ========================================================*)\n(* value_of_expr : ast -> environment -> valueType *)\n(* Fonction d'évaluation des expressions *)\nlet rec value_of_expr expr env =\n  match expr with\n  | (FunctionNode (_,_)) ->\n     ruleFunction expr env\n  | (CallNode (fexpr,pexpr)) ->\n     ruleCallByValue env fexpr pexpr\n  (*| (CallNode (fexpr,pexpr)) -> \n    ruleCallByName env fexpr pexpr *) \n  | (IfthenelseNode (cond,bthen,belse)) ->\n     ruleIf env cond bthen belse\n  | (LetNode (ident,bvalue,bin)) ->\n     ruleLet env ident bvalue bin\n  | (LetrecNode (ident,bvalue,bin)) ->\n     ruleLetrec env ident bvalue bin \n  | (AccessNode name) ->\n     ruleName env name\n  | (IntegerNode value) ->\n     ruleInteger value\n  | (TrueNode) ->  ruleTrue \n  | (FalseNode) ->  ruleFalse \n  | (BinaryNode (op,left,right)) ->\n     ruleBinary env op left right\n  | (UnaryNode (op,expr)) ->\n     ruleUnary env op expr\n  | _ -> ErrorValue UndefinedExpressionError (* les expressions avec effets de bord *)\n\n(* ========================================================*)\n  and \n    (* ruleName : environment -> string -> valueType *)\n    (* Fonction d'évaluation d'un identificateur *)\n    ruleName env name = \n    match (lookfor name env) with\n    | NotFound -> (ErrorValue (UnknownIdentError name))\n    (* A completer*)\n    | (Found value) -> value\n                     \n(* ========================================================*)\n  and \n    (* ruleLet : environment -> string -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un let *)\n    (* \"let ident = bvalue in bin\" *)\n    ruleLet env ident bvalue bin = \n    (* A traiter*)\n    (ErrorValue UndefinedExpressionError)\n    \n(* ========================================================*)\n  and \n    (* ruleBinary : environment -> binary -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un opérateur binaire *)\n    ruleBinary env op left right = \n    let leftvalue = \n      (value_of_expr left env) (* Evaluation du paramètre gauche *)\n    in\n    (match leftvalue with\n     | (ErrorValue _) as result -> result (* Propagation de l'erreur *)\n     | _ ->\n        (let rightvalue = \n           (value_of_expr right env) (* Evaluation du paramètre droit *)\n         in\n         (match rightvalue with\n          | (ErrorValue _) as result -> result (* Propagation de l'erreur *)\n          | _ ->\n             (match (leftvalue,rightvalue) with\n              (* Vérification des types *)\n              | ((IntegerValue leftvalue), (IntegerValue rightvalue)) -> \n                 (match op with\n                  | Equal -> (BooleanValue (leftvalue = rightvalue))\n                  | Different -> (BooleanValue (leftvalue <> rightvalue))\n                  | Lesser -> (BooleanValue (leftvalue < rightvalue))\n                  | LesserEqual -> (BooleanValue (leftvalue <= rightvalue))\n                  | Greater -> (BooleanValue (leftvalue > rightvalue))\n                  | GreaterEqual -> (BooleanValue (leftvalue >= rightvalue))\n                  | Add -> (IntegerValue (leftvalue + rightvalue))\n                  | Substract -> (IntegerValue (leftvalue - rightvalue))\n                  | Multiply -> (IntegerValue (leftvalue * rightvalue))\n                  | Divide -> \n                     (if (rightvalue = 0) then \n                        (ErrorValue RuntimeError) (* Division par zéro *)\n                      else \n                        (IntegerValue (leftvalue / rightvalue)))\n                  | _ -> (ErrorValue TypeMismatchError))\n              (* Vérification des types *)\n              | ((BooleanValue leftvalue), (BooleanValue rightvalue)) -> \n                 (match op with\n                  | Or -> (BooleanValue (leftvalue || rightvalue))\n                  | And -> (BooleanValue (leftvalue && rightvalue))\n                  | _ -> (ErrorValue TypeMismatchError))\n              | _ -> (ErrorValue TypeMismatchError)))))\n    \n(* ========================================================*)\n  and \n    (* ruleUnary : environment -> unary -> ast- > valueType *)\n    (* Fonction d'évaluation d'un opérateur unaire *)\n    ruleUnary env op exp =\n    let value =  \n      (value_of_expr exp env) \n    in\n    match value with\n    | (ErrorValue _) as result -> result (* Propagation des erreurs *)\n    (* Vérification des types *)\n    | (IntegerValue value) ->\n       (match op with\n        | Negate -> (IntegerValue (- value)))\n    | _ -> (ErrorValue TypeMismatchError)\n         \n(* ========================================================*)\nand\n(* ruleIf : environment -> ast -> ast -> ast- > valueType *)\n(* Fonction d'évaluation d'une conditionnelle *)\n(* \"if cond then bthen else belse\" *)\nruleIf env cond bthen belse = \n(* A traiter*)\n     (ErrorValue UndefinedExpressionError)\n(* ========================================================*)\nand \n(* ruleFunction : ast -> environment -> valueType *)\n(* Fonction d'évaluation d'une fonction *)\nruleFunction expr env = \n(* A traiter*)\n     (ErrorValue UndefinedExpressionError)\n\n(* Appel par nom *)\n(* ========================================================*)\nand\n(* ruleCallByName : environment -> ast -> ast -> valueType *)\n(* Fonction d'évaluation d'un appel de fonction avec passage de paramètre par nom*)\nruleCallByName env fexpr pexpr = \n(* A traiter*)\n     (ErrorValue UndefinedExpressionError)\n(* ========================================================*)\nand\n(* ruleCallByValue : environment -> ast -> ast -> valueType *)\n(* Fonction d'évaluation d'un appel de fonction avec passage de paramètre par valeur*)\nruleCallByValue env fexpr pexpr = \n(* Appel par valeur *)\n(* A traiter*)\n     (ErrorValue UndefinedExpressionError)\n(* ========================================================*)\nand\n(* ruleLetrec : environment -> string -> ast- > ast -> valueType *)\n(* Fonction d'évaluation d'un let rec*)\n(* \"letrec ident = bvalue in bin\" *)\nruleLetrec env ident bvalue bin = \n(* A traiter*)\n     (ErrorValue UndefinedExpressionError)\n(* ========================================================*)\nand\n(* ruleTrue : valueType *)\n(* Fonction d'évaluation de true *)\nruleTrue = (BooleanValue true)\n\n(* ========================================================*)\nand\n(* ruleFalse : valueType *)\n(* Fonction d'évaluation de false *)\nruleFalse = (BooleanValue false)\n\n(* ========================================================*)\nand \n(* ruleInteger : int -> valueType *)\n(* Fonction d'évaluation d'un entier *)\nruleInteger value = (IntegerValue value)\n\n"}}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"},"position":{"line":126,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"},"position":{"line":12,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","languageId":"ocaml","version":1,"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(*Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | AccessNode of string               (* ident *)\n  | IntegerNode of int                 (* number *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un ast en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | (AccessNode name) -> name\n  | (IntegerNode value) -> (string_of_int value) \n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | UnitNode  -> ( \"()\");;\n\n"}}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 8, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"position":{"line":13,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"position":{"line":16,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"position":{"line":16,"character":2}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"position":{"line":16,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 13, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"range":{"start":{"line":16,"character":2},"end":{"line":16,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":2},"contentChanges":[{"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(* Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | AccessNode of string               (* ident *)\n  | IntegerNode of int                 (* number *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un ast en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | (AccessNode name) -> name\n  | (IntegerNode value) -> (string_of_int value) \n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | UnitNode  -> ( \"()\");;\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 15, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"range":{"start":{"line":16,"character":3},"end":{"line":16,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"position":{"line":41,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"position":{"line":41,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"position":{"line":41,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"position":{"line":41,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"position":{"line":41,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"range":{"start":{"line":41,"character":19},"end":{"line":41,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":3},"contentChanges":[{"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(* Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | AccessNode of string               (* ident *)\n  | IntegerNode of int                 (* number *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un as en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | (AccessNode name) -> name\n  | (IntegerNode value) -> (string_of_int value) \n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | UnitNode  -> ( \"()\");;\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0338554382324ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 24, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":4},"contentChanges":[{"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(* Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | AccessNode of string               (* ident *)\n  | IntegerNode of int                 (* number *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un a en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | (AccessNode name) -> name\n  | (IntegerNode value) -> (string_of_int value) \n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | UnitNode  -> ( \"()\");;\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":5},"contentChanges":[{"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(* Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | AccessNode of string               (* ident *)\n  | IntegerNode of int                 (* number *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un  en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | (AccessNode name) -> name\n  | (IntegerNode value) -> (string_of_int value) \n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | UnitNode  -> ( \"()\");;\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 25, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":6},"contentChanges":[{"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(* Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | AccessNode of string               (* ident *)\n  | IntegerNode of int                 (* number *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un A en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | (AccessNode name) -> name\n  | (IntegerNode value) -> (string_of_int value) \n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | UnitNode  -> ( \"()\");;\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 27, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"range":{"start":{"line":41,"character":17},"end":{"line":41,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":28}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":7},"contentChanges":[{"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(* Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | AccessNode of string               (* ident *)\n  | IntegerNode of int                 (* number *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un AS en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | (AccessNode name) -> name\n  | (IntegerNode value) -> (string_of_int value) \n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | UnitNode  -> ( \"()\");;\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 29, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"range":{"start":{"line":41,"character":18},"end":{"line":41,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":30}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":8},"contentChanges":[{"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(* Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | AccessNode of string               (* ident *)\n  | IntegerNode of int                 (* number *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un AST en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | (AccessNode name) -> name\n  | (IntegerNode value) -> (string_of_int value) \n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | UnitNode  -> ( \"()\");;\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 31, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"range":{"start":{"line":41,"character":19},"end":{"line":41,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":8},"contentChanges":[{"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(* Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | AccessNode of string               (* ident *)\n  | IntegerNode of int                 (* number *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un AST en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | (AccessNode name) -> name\n  | (IntegerNode value) -> (string_of_int value) \n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | UnitNode  -> ( \"()\");;\n\n"}]}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":8}}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml"},"position":{"line":48,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml","languageId":"ocaml","version":1,"text":"(* Analyseur sémantique *)\n\nopen Ast\n\n(* ======================================================== *)\n(* Définition du type des erreurs *)\ntype errorType =\n  | UnknownIdentError of string (* Identificateur non défini *)\n  | TypeMismatchError           (* Erreur de type *)\n  | RuntimeError                (* Erreur à l'exécution *)\n  | UndefinedExpressionError    (* Expression non définie à traiter par les étudiants *)\n\n(* ======================================================== *)\n(* Définition du type des valeurs renvoyées par l'interprète *)\ntype valueType =\n  | FrozenValue of (ast * environment)        (* Fermeture fonctionnelle *)\n  | IntegerValue of int                       (* Valeur entière *)\n  | BooleanValue of bool                      (* Valeur booléenne *)\n  | ErrorValue of errorType                   (* Valeur représentant une erreur *)\nand environment = (string * valueType) list   (* Environnement d'exécution *)\n\n\n(* ========================================================*)\n(* string_of_names : string list -> string *)\n(* Converti une liste de chaînes de caractères en une seule chaîne de caractères *)\nlet string_of_names names =\n  List.fold_right (fun t tq -> t ^ \" \" ^ tq ) names \"\"\n\n(* string_of_env : environment -> string *)\n(* Convertit un environnement en une chaine de caractères en vue de son affichage *)\nlet rec string_of_env env =\n  match env with\n  | [] -> \"\"\n  | (key,value)::q -> (key ^ \",\" ^ (string_of_value value)) ^ \";\" ^ (string_of_env q)\n                    \n(* string_of_value : valueType -> string *)\n(* Convertit une valueType en une chaine de caractères en vue de son affichage *)\nand string_of_value value =\n  match value with\n  | (FrozenValue (expr,env)) -> ((string_of_ast expr) ^ (string_of_env env))\n  | (IntegerValue value) -> (string_of_int value)\n  | (BooleanValue value) -> (if (value) then \"true\" else \"false\")\n  | (ErrorValue error) -> (string_of_error error)\n                        \n(* string_of_error : errorType -> string *)\n(* Convertit une erreur en une chaine de caractères en vue de son affichage *)\nand string_of_error error =\n  match error with\n  | (UnknownIdentError name) -> \"Unknown ident : \" ^ name\n  | RuntimeError -> \"Runtime error\"\n  | TypeMismatchError -> \"Type mismatch\"\n  | UndefinedExpressionError -> \"Undefined expression error\"\n\n(* ========================================================*)\ntype 'a searchResult = \n  | NotFound \n  | Found of 'a\n\n(* lookfor : string -> environment -> valueType searchResult *)\n(* Cherche un identifiant dans un environnement et renvoie la valeur associée le cas échéant *)\nlet rec lookfor name env =\n  match env with\n  | [] -> NotFound\n  | (key,value) :: others ->\n    (if (key = name) then (Found value) else (lookfor name others))\n  \n(* ========================================================*)\n(* value_of_expr : ast -> environment -> valueType *)\n(* Fonction d'évaluation des expressions *)\nlet rec value_of_expr expr env =\n  match expr with\n  | (FunctionNode (_,_)) ->\n     ruleFunction expr env\n  | (CallNode (fexpr,pexpr)) ->\n     ruleCallByValue env fexpr pexpr\n  (*| (CallNode (fexpr,pexpr)) -> \n    ruleCallByName env fexpr pexpr *) \n  | (IfthenelseNode (cond,bthen,belse)) ->\n     ruleIf env cond bthen belse\n  | (LetNode (ident,bvalue,bin)) ->\n     ruleLet env ident bvalue bin\n  | (LetrecNode (ident,bvalue,bin)) ->\n     ruleLetrec env ident bvalue bin \n  | (AccessNode name) ->\n     ruleName env name\n  | (IntegerNode value) ->\n     ruleInteger value\n  | (TrueNode) ->  ruleTrue \n  | (FalseNode) ->  ruleFalse \n  | (BinaryNode (op,left,right)) ->\n     ruleBinary env op left right\n  | (UnaryNode (op,expr)) ->\n     ruleUnary env op expr\n  | _ -> ErrorValue UndefinedExpressionError (* les expressions avec effets de bord *)\n\n(* ========================================================*)\n  and \n    (* ruleName : environment -> string -> valueType *)\n    (* Fonction d'évaluation d'un identificateur *)\n    ruleName env name = \n    match (lookfor name env) with\n    | NotFound -> (ErrorValue (UnknownIdentError name))\n    (* A completer*)\n    | (Found value) -> value\n                     \n(* ========================================================*)\n  and \n    (* ruleLet : environment -> string -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un let *)\n    (* \"let ident = bvalue in bin\" *)\n    ruleLet env ident bvalue bin = \n    (* A traiter*)\n    (ErrorValue UndefinedExpressionError)\n    \n(* ========================================================*)\n  and \n    (* ruleBinary : environment -> binary -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un opérateur binaire *)\n    ruleBinary env op left right = \n    let leftvalue = \n      (value_of_expr left env) (* Evaluation du paramètre gauche *)\n    in\n    (match leftvalue with\n     | (ErrorValue _) as result -> result (* Propagation de l'erreur *)\n     | _ ->\n        (let rightvalue = \n           (value_of_expr right env) (* Evaluation du paramètre droit *)\n         in\n         (match rightvalue with\n          | (ErrorValue _) as result -> result (* Propagation de l'erreur *)\n          | _ ->\n             (match (leftvalue,rightvalue) with\n              (* Vérification des types *)\n              | ((IntegerValue leftvalue), (IntegerValue rightvalue)) -> \n                 (match op with\n                  | Equal -> (BooleanValue (leftvalue = rightvalue))\n                  | Different -> (BooleanValue (leftvalue <> rightvalue))\n                  | Lesser -> (BooleanValue (leftvalue < rightvalue))\n                  | LesserEqual -> (BooleanValue (leftvalue <= rightvalue))\n                  | Greater -> (BooleanValue (leftvalue > rightvalue))\n                  | GreaterEqual -> (BooleanValue (leftvalue >= rightvalue))\n                  | Add -> (IntegerValue (leftvalue + rightvalue))\n                  | Substract -> (IntegerValue (leftvalue - rightvalue))\n                  | Multiply -> (IntegerValue (leftvalue * rightvalue))\n                  | Divide -> \n                     (if (rightvalue = 0) then \n                        (ErrorValue RuntimeError) (* Division par zéro *)\n                      else \n                        (IntegerValue (leftvalue / rightvalue)))\n                  | _ -> (ErrorValue TypeMismatchError))\n              (* Vérification des types *)\n              | ((BooleanValue leftvalue), (BooleanValue rightvalue)) -> \n                 (match op with\n                  | Or -> (BooleanValue (leftvalue || rightvalue))\n                  | And -> (BooleanValue (leftvalue && rightvalue))\n                  | _ -> (ErrorValue TypeMismatchError))\n              | _ -> (ErrorValue TypeMismatchError)))))\n    \n(* ========================================================*)\n  and \n    (* ruleUnary : environment -> unary -> ast- > valueType *)\n    (* Fonction d'évaluation d'un opérateur unaire *)\n    ruleUnary env op exp =\n    let value =  \n      (value_of_expr exp env) \n    in\n    match value with\n    | (ErrorValue _) as result -> result (* Propagation des erreurs *)\n    (* Vérification des types *)\n    | (IntegerValue value) ->\n       (match op with\n        | Negate -> (IntegerValue (- value)))\n    | _ -> (ErrorValue TypeMismatchError)\n         \n(* ========================================================*)\nand\n(* ruleIf : environment -> ast -> ast -> ast- > valueType *)\n(* Fonction d'évaluation d'une conditionnelle *)\n(* \"if cond then bthen else belse\" *)\nruleIf env cond bthen belse = \n(* A traiter*)\n     (ErrorValue UndefinedExpressionError)\n(* ========================================================*)\nand \n(* ruleFunction : ast -> environment -> valueType *)\n(* Fonction d'évaluation d'une fonction *)\nruleFunction expr env = \n(* A traiter*)\n     (ErrorValue UndefinedExpressionError)\n\n(* Appel par nom *)\n(* ========================================================*)\nand\n(* ruleCallByName : environment -> ast -> ast -> valueType *)\n(* Fonction d'évaluation d'un appel de fonction avec passage de paramètre par nom*)\nruleCallByName env fexpr pexpr = \n(* A traiter*)\n     (ErrorValue UndefinedExpressionError)\n(* ========================================================*)\nand\n(* ruleCallByValue : environment -> ast -> ast -> valueType *)\n(* Fonction d'évaluation d'un appel de fonction avec passage de paramètre par valeur*)\nruleCallByValue env fexpr pexpr = \n(* Appel par valeur *)\n(* A traiter*)\n     (ErrorValue UndefinedExpressionError)\n(* ========================================================*)\nand\n(* ruleLetrec : environment -> string -> ast- > ast -> valueType *)\n(* Fonction d'évaluation d'un let rec*)\n(* \"letrec ident = bvalue in bin\" *)\nruleLetrec env ident bvalue bin = \n(* A traiter*)\n     (ErrorValue UndefinedExpressionError)\n(* ========================================================*)\nand\n(* ruleTrue : valueType *)\n(* Fonction d'évaluation de true *)\nruleTrue = (BooleanValue true)\n\n(* ========================================================*)\nand\n(* ruleFalse : valueType *)\n(* Fonction d'évaluation de false *)\nruleFalse = (BooleanValue false)\n\n(* ========================================================*)\nand \n(* ruleInteger : int -> valueType *)\n(* Fonction d'évaluation d'un entier *)\nruleInteger value = (IntegerValue value)\n\n"}}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0178813934326ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 37, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"},"position":{"line":13,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"},"position":{"line":12,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml","version":2},"contentChanges":[{"text":"(* Analyseur sémantique *)\n\nopen Ast\n\n(* ======================================================== *)\n(* Définition du type des erreurs *)\ntype errorType =\n  | UnknownIdentError of string (* Identificateur non défini *)\n  | TypeMismatchError           (* Erreur de type *)\n  | RuntimeError                (* Erreur à l'exécution *)\n  | UndefinedExpressionError    (* Expression non définie à traiter par les étudiants *)\n\n(* ======================================================== *)\n(* Définition du type des valeurs renvoyées par l'interprète *)\ntype valueType =\n  | FrozenValue of (ast * environment)        (* Fermeture fonctionnelle *)\n  | IntegerValue of int                       (* Valeur entière *)\n  | BooleanValue of bool                      (* Valeur booléenne *)\n  | ErrorValue of errorType                   (* Valeur représentant une erreur *)\nand environment = (string * valueType) list   (* Environnement d'exécution *)\n\n\n(* ========================================================*)\n(* string_of_names : string list -> string *)\n(* Converti une liste de chaînes de caractères en une seule chaîne de caractères *)\nlet string_of_names names =\n  List.fold_right (fun t tq -> t ^ \" \" ^ tq ) names \"\"\n\n(* string_of_env : environment -> string *)\n(* Convertit un environnement en une chaine de caractères en vue de son affichage *)\nlet rec string_of_env env =\n  match env with\n  | [] -> \"\"\n  | (key,value)::q -> (key ^ \",\" ^ (string_of_value value)) ^ \";\" ^ (string_of_env q)\n                    \n(* string_of_value : valueType -> string *)\n(* Convertit une valueType en une chaine de caractères en vue de son affichage *)\nand string_of_value value =\n  match value with\n  | (FrozenValue (expr,env)) -> ((string_of_ast expr) ^ (string_of_env env))\n  | (IntegerValue value) -> (string_of_int value)\n  | (BooleanValue value) -> (if (value) then \"true\" else \"false\")\n  | (ErrorValue error) -> (string_of_error error)\n                        \n(* string_of_error : errorType -> string *)\n(* Convertit une erreur en une chaine de caractères en vue de son affichage *)\nand string_of_error error =\n  match error with\n  | (UnknownIdentError name) -> \"Unknown ident : \" ^ name\n  | RuntimeError -> \"Runtime error\"\n  | TypeMismatchError -> \"Type mismatch\"\n  | UndefinedExpressionError -> \"Undefined expression error\"\n\n(* ========================================================*)\ntype 'a searchResult = \n  | NotFound \n  | Found of 'a\n\n(* lookfor : string -> environment -> valueType searchResult *)\n(* Cherche un identifiant dans un environnement et renvoie la valeur associée le cas échéant *)\nlet rec lookfor name env =\n  match env with\n  | [] -> NotFound\n  | (key,value) :: others ->\n    (if (key = name) then (Found value) else (lookfor name others))\n  \n(* ========================================================*)\n(* value_of_expr : ast -> environment -> valueType *)\n(* Fonction d'évaluation des expressions *)\nlet rec value_of_expr expr env =\n  match expr with\n  | (FunctionNode (_,_)) ->\n     ruleFunction expr env\n  | (CallNode (fexpr,pexpr)) ->\n     ruleCallByValue env fexpr pexpr\n  (*| (CallNode (fexpr,pexpr)) -> \n    ruleCallByName env fexpr pexpr *) \n  | (IfthenelseNode (cond,bthen,belse)) ->\n     ruleIf env cond bthen belse\n  | (LetNode (ident,bvalue,bin)) ->\n     ruleLet env ident bvalue bin\n  | (LetrecNode (ident,bvalue,bin)) ->\n     ruleLetrec env ident bvalue bin \n  | (AccessNode name) ->\n     ruleAccess env name\n  | (IntegerNode value) ->\n     ruleInteger value\n  | (TrueNode) ->  ruleTrue \n  | (FalseNode) ->  ruleFalse \n  | (BinaryNode (op,left,right)) ->\n     ruleBinary env op left right\n  | (UnaryNode (op,expr)) ->\n     ruleUnary env op expr\n  | _ -> ErrorValue UndefinedExpressionError (* les expressions avec effets de bord *)\n\n  (* ========================================================*)\n  and\n    (* ruleTrue : valueType *)\n    (* Fonction d'évaluation de true *)\n    ruleTrue = (BooleanValue true)\n             \n  (* ========================================================*)\n  and\n    (* ruleFalse : valueType *)\n    (* Fonction d'évaluation de false *)\n    ruleFalse = (BooleanValue false)\n\n  (* ========================================================*)\n  and \n    (* ruleInteger : int -> valueType *)\n    (* Fonction d'évaluation d'un entier *)\n    ruleInteger value = (IntegerValue value)\n\n  (* ========================================================*)\n  and \n    (* ruleName : environment -> string -> valueType *)\n    (* Fonction d'évaluation d'un identificateur *)\n    ruleAccess env name = \n    match (lookfor name env) with\n    | NotFound -> (ErrorValue (UnknownIdentError name))\n    (* A compléter lors de l'ajout de la fermeture pour les définitions récursives *)\n    | (Found value) -> value\n                     \n(* ========================================================*)\n  and \n    (* ruleLet : environment -> string -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un let *)\n    (* \"let ident = bvalue in bin\" *)\n    ruleLet env ident bvalue bin = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n(* ========================================================*)\n  and \n    (* ruleBinary : environment -> binary -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un opérateur binaire *)\n    ruleBinary env op left right = \n    let leftvalue = \n      (value_of_expr left env) (* Evaluation du paramètre gauche *)\n    in\n    (match leftvalue with\n     | (ErrorValue _) as result -> result (* Propagation de l'erreur *)\n     | _ ->\n        (let rightvalue = \n           (value_of_expr right env) (* Evaluation du paramètre droit *)\n         in\n         (match rightvalue with\n          | (ErrorValue _) as result -> result (* Propagation de l'erreur *)\n          | _ ->\n             (match (leftvalue,rightvalue) with\n              (* Vérification des types *)\n              | ((IntegerValue leftvalue), (IntegerValue rightvalue)) -> \n                 (match op with\n                  | Equal -> (BooleanValue (leftvalue = rightvalue))\n                  | Different -> (BooleanValue (leftvalue <> rightvalue))\n                  | Lesser -> (BooleanValue (leftvalue < rightvalue))\n                  | LesserEqual -> (BooleanValue (leftvalue <= rightvalue))\n                  | Greater -> (BooleanValue (leftvalue > rightvalue))\n                  | GreaterEqual -> (BooleanValue (leftvalue >= rightvalue))\n                  | Add -> (IntegerValue (leftvalue + rightvalue))\n                  | Substract -> (IntegerValue (leftvalue - rightvalue))\n                  | Multiply -> (IntegerValue (leftvalue * rightvalue))\n                  | Divide -> \n                     (if (rightvalue = 0) then \n                        (ErrorValue RuntimeError) (* Division par zéro *)\n                      else \n                        (IntegerValue (leftvalue / rightvalue)))\n                  | _ -> (ErrorValue TypeMismatchError))\n              (* Vérification des types *)\n              | ((BooleanValue leftvalue), (BooleanValue rightvalue)) -> \n                 (match op with\n                  | Or -> (BooleanValue (leftvalue || rightvalue))\n                  | And -> (BooleanValue (leftvalue && rightvalue))\n                  | _ -> (ErrorValue TypeMismatchError))\n              | _ -> (ErrorValue TypeMismatchError)))))\n    \n  (* ========================================================*)\n  and \n    (* ruleUnary : environment -> unary -> ast- > valueType *)\n    (* Fonction d'évaluation d'un opérateur unaire *)\n    ruleUnary env op exp =\n    let value =  \n      (value_of_expr exp env) \n    in\n    match value with\n    | (ErrorValue _) as result -> result (* Propagation des erreurs *)\n    (* Vérification des types *)\n    | (IntegerValue value) ->\n       (match op with\n        | Negate -> (IntegerValue (- value)))\n    | _ -> (ErrorValue TypeMismatchError)\n         \n  (* ========================================================*)\n  and\n    (* ruleIf : environment -> ast -> ast -> ast- > valueType *)\n    (* Fonction d'évaluation d'une conditionnelle *)\n    (* \"if cond then bthen else belse\" *)\n    ruleIf env cond bthen belse = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n  (* ========================================================*)\n  and \n    (* ruleFunction : ast -> environment -> valueType *)\n    (* Fonction d'évaluation d'une fonction *)\n    ruleFunction expr env = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n\n  (* Appel par nom *)\n  (* ========================================================*)\n  and\n    (* ruleCallByName : environment -> ast -> ast -> valueType *)\n    (* Fonction d'évaluation d'un appel de fonction avec passage de paramètre par nom*)\n    ruleCallByName env fexpr pexpr = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n  (* ========================================================*)\n  and\n    (* ruleCallByValue : environment -> ast -> ast -> valueType *)\n    (* Fonction d'évaluation d'un appel de fonction avec passage de paramètre par valeur*)\n    ruleCallByValue env fexpr pexpr = \n    (* Appel par valeur *)\n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n  (* ========================================================*)\n  and\n    (* ruleLetrec : environment -> string -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un let rec*)\n    (* \"letrec ident = bvalue in bin\" *)\n    ruleLetrec env ident bvalue bin = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 40, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0259876251221ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml","version":3},"contentChanges":[{"text":"(* Analyseur sémantique *)\n\nopen Ast\n\n(* ======================================================== *)\n(* Définition du type des erreurs *)\ntype errorType =\n  | UnknownIdentError of string (* Identificateur non défini *)\n  | TypeMismatchError           (* Erreur de type *)\n  | RuntimeError                (* Erreur à l'exécution *)\n  | UndefinedExpressionError    (* Expression non définie à traiter par les étudiants *)\n\n(* ======================================================== *)\n(* Définition du type des valeurs renvoyées par l'interprète *)\ntype valueType =\n  | FrozenValue of (ast * environment)        (* Fermeture fonctionnelle *)\n  | IntegerValue of int                       (* Valeur entière *)\n  | BooleanValue of bool                      (* Valeur booléenne *)\n  | ErrorValue of errorType                   (* Valeur représentant une erreur *)\nand environment = (string * valueType) list   (* Environnement d'exécution *)\n\n\n(* ========================================================*)\n(* string_of_names : string list -> string *)\n(* Converti une liste de chaînes de caractères en une seule chaîne de caractères *)\nlet string_of_names names =\n  List.fold_right (fun t tq -> t ^ \" \" ^ tq ) names \"\"\n\n(* string_of_env : environment -> string *)\n(* Convertit un environnement en une chaine de caractères en vue de son affichage *)\nlet rec string_of_env env =\n  match env with\n  | [] -> \"\"\n  | (key,value)::q -> (key ^ \",\" ^ (string_of_value value)) ^ \";\" ^ (string_of_env q)\n                    \n(* string_of_value : valueType -> string *)\n(* Convertit une valueType en une chaine de caractères en vue de son affichage *)\nand string_of_value value =\n  match value with\n  | (FrozenValue (expr,env)) -> ((string_of_ast expr) ^ (string_of_env env))\n  | (IntegerValue value) -> (string_of_int value)\n  | (BooleanValue value) -> (if (value) then \"true\" else \"false\")\n  | (ErrorValue error) -> (string_of_error error)\n                        \n(* string_of_error : errorType -> string *)\n(* Convertit une erreur en une chaine de caractères en vue de son affichage *)\nand string_of_error error =\n  match error with\n  | (UnknownIdentError name) -> \"Unknown ident : \" ^ name\n  | RuntimeError -> \"Runtime error\"\n  | TypeMismatchError -> \"Type mismatch\"\n  | UndefinedExpressionError -> \"Undefined expression error\"\n\n(* ========================================================*)\ntype 'a searchResult = \n  | NotFound \n  | Found of 'a\n\n(* lookfor : string -> environment -> valueType searchResult *)\n(* Cherche un identifiant dans un environnement et renvoie la valeur associée le cas échéant *)\nlet rec lookfor name env =\n  match env with\n  | [] -> NotFound\n  | (key,value) :: others ->\n    (if (key = name) then (Found value) else (lookfor name others))\n  \n(* ========================================================*)\n(* value_of_expr : ast -> environment -> valueType *)\n(* Fonction d'évaluation des expressions *)\nlet rec value_of_expr expr env =\n  match expr with\n  | (FunctionNode (_,_)) ->\n     ruleFunction expr env\n  | (CallNode (fexpr,pexpr)) ->\n     ruleCallByValue env fexpr pexpr\n  (*| (CallNode (fexpr,pexpr)) -> \n    ruleCallByName env fexpr pexpr *) \n  | (IfthenelseNode (cond,bthen,belse)) ->\n     ruleIf env cond bthen belse\n  | (LetNode (ident,bvalue,bin)) ->\n     ruleLet env ident bvalue bin\n  | (LetrecNode (ident,bvalue,bin)) ->\n     ruleLetrec env ident bvalue bin \n  | (AccessNode name) ->\n     ruleAccess env name\n  | (IntegerNode value) ->\n     ruleInteger value\n  | (TrueNode) ->  ruleTrue \n  | (FalseNode) ->  ruleFalse \n  | (BinaryNode (op,left,right)) ->\n     ruleBinary env op left right\n  | (UnaryNode (op,expr)) ->\n     ruleUnary env op expr\n  | _ -> ErrorValue UndefinedExpressionError (* les expressions avec effets de bord *)\n\n  (* ========================================================*)\n  and\n    (* ruleTrue : valueType *)\n    (* Fonction d'évaluation de true *)\n    ruleTrue = (BooleanValue true)\n             \n  (* ========================================================*)\n  and\n    (* ruleFalse : valueType *)\n    (* Fonction d'évaluation de false *)\n    ruleFalse = (BooleanValue false)\n\n  (* ========================================================*)\n  and \n    (* ruleInteger : int -> valueType *)\n    (* Fonction d'évaluation d'un entier *)\n    ruleInteger value = (IntegerValue value)\n\n  (* ========================================================*)\n  and \n    (* ruleName : environment -> string -> valueType *)\n    (* Fonction d'évaluation d'un identificateur *)\n    ruleAccess env name = \n    match (lookfor name env) with\n    | NotFound -> (ErrorValue (UnknownIdentError name))\n    (* A compléter lors de l'ajout de la fermeture pour les définitions récursives *)\n    | (Found value) -> value\n    \n  (* ========================================================*)\n  and \n    (* ruleBinary : environment -> binary -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un opérateur binaire *)\n    ruleBinary env op left right = \n    let leftvalue = \n      (value_of_expr left env) (* Evaluation du paramètre gauche *)\n    in\n    (match leftvalue with\n     | (ErrorValue _) as result -> result (* Propagation de l'erreur *)\n     | _ ->\n        (let rightvalue = \n           (value_of_expr right env) (* Evaluation du paramètre droit *)\n         in\n         (match rightvalue with\n          | (ErrorValue _) as result -> result (* Propagation de l'erreur *)\n          | _ ->\n             (match (leftvalue,rightvalue) with\n              (* Vérification des types *)\n              | ((IntegerValue leftvalue), (IntegerValue rightvalue)) -> \n                 (match op with\n                  | Equal -> (BooleanValue (leftvalue = rightvalue))\n                  | Different -> (BooleanValue (leftvalue <> rightvalue))\n                  | Lesser -> (BooleanValue (leftvalue < rightvalue))\n                  | LesserEqual -> (BooleanValue (leftvalue <= rightvalue))\n                  | Greater -> (BooleanValue (leftvalue > rightvalue))\n                  | GreaterEqual -> (BooleanValue (leftvalue >= rightvalue))\n                  | Add -> (IntegerValue (leftvalue + rightvalue))\n                  | Substract -> (IntegerValue (leftvalue - rightvalue))\n                  | Multiply -> (IntegerValue (leftvalue * rightvalue))\n                  | Divide -> \n                     (if (rightvalue = 0) then \n                        (ErrorValue RuntimeError) (* Division par zéro *)\n                      else \n                        (IntegerValue (leftvalue / rightvalue)))\n                  | _ -> (ErrorValue TypeMismatchError))\n              (* Vérification des types *)\n              | ((BooleanValue leftvalue), (BooleanValue rightvalue)) -> \n                 (match op with\n                  | Or -> (BooleanValue (leftvalue || rightvalue))\n                  | And -> (BooleanValue (leftvalue && rightvalue))\n                  | _ -> (ErrorValue TypeMismatchError))\n              | _ -> (ErrorValue TypeMismatchError)))))\n    \n  (* ========================================================*)\n  and \n    (* ruleUnary : environment -> unary -> ast- > valueType *)\n    (* Fonction d'évaluation d'un opérateur unaire *)\n    ruleUnary env op exp =\n    let value =  \n      (value_of_expr exp env) \n    in\n    match value with\n    | (ErrorValue _) as result -> result (* Propagation des erreurs *)\n    (* Vérification des types *)\n    | (IntegerValue value) ->\n       (match op with\n        | Negate -> (IntegerValue (- value)))\n    | _ -> (ErrorValue TypeMismatchError)\n\n                              \n  (* ========================================================*)\n  and \n    (* ruleLet : environment -> string -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un let *)\n    (* \"let ident = bvalue in bin\" *)\n    ruleLet env ident bvalue bin = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n         \n  (* ========================================================*)\n  and\n    (* ruleIf : environment -> ast -> ast -> ast- > valueType *)\n    (* Fonction d'évaluation d'une conditionnelle *)\n    (* \"if cond then bthen else belse\" *)\n    ruleIf env cond bthen belse = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n  (* ========================================================*)\n  and \n    (* ruleFunction : ast -> environment -> valueType *)\n    (* Fonction d'évaluation d'une fonction *)\n    ruleFunction expr env = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n\n  (* Appel par nom *)\n  (* ========================================================*)\n  and\n    (* ruleCallByName : environment -> ast -> ast -> valueType *)\n    (* Fonction d'évaluation d'un appel de fonction avec passage de paramètre par nom*)\n    ruleCallByName env fexpr pexpr = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n  (* ========================================================*)\n  and\n    (* ruleCallByValue : environment -> ast -> ast -> valueType *)\n    (* Fonction d'évaluation d'un appel de fonction avec passage de paramètre par valeur*)\n    ruleCallByValue env fexpr pexpr = \n    (* Appel par valeur *)\n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n  (* ========================================================*)\n  and\n    (* ruleLetrec : environment -> string -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un let rec*)\n    (* \"letrec ident = bvalue in bin\" *)\n    ruleLetrec env ident bvalue bin = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 42, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin"}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":9},"contentChanges":[{"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(* Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  (* Expressions *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | IntegerNode of int                 (* number *)\n  | AccessNode of string               (* ident *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  (* Partie fonctionnelle *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  (* Partie impérative *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un AST en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | (AccessNode name) -> name\n  | (IntegerNode value) -> (string_of_int value) \n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | UnitNode  -> ( \"()\");;\n\n"}]}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Ast.ml","version":10},"contentChanges":[{"text":"(* Type des opérateurs binaires *)\ntype binary = \n  | Add \n  | Substract \n  | Or \n  | Multiply \n  | Divide \n  | And \n  | Equal \n  | Different \n  | Lesser \n  | LesserEqual \n  | Greater \n  | GreaterEqual\n\n\n(* Type des opérateurs unaires *)\ntype unary = \n  | Negate\n\n(* Type pour la construction de l'arbre abstrait (Abstract Syntaxic Tree) *)\ntype ast =\n  (* Expressions *)\n  | TrueNode                           (* true *)\n  | FalseNode                          (* false *)\n  | IntegerNode of int                 (* number *)\n  | AccessNode of string               (* ident *)\n  | UnaryNode of unary * ast           (* unop E *)\n  | BinaryNode of binary * ast * ast   (* E binop E *)\n  (* Partie fonctionnelle *)\n  | LetNode of string * ast * ast      (* let ident = E in E *)\n  | IfthenelseNode of ast * ast * ast  (* if E then E else E *)\n  | FunctionNode of string * ast       (* fun ident -> E *)\n  | CallNode of ast * ast              (* (E) E *)\n  | LetrecNode of string * ast * ast   (* letrec ident = E in E *)\n  (* Partie impérative *)\n  | RefNode of ast                     (* ref E *)\n  | ReadNode of ast                    (* ! E *)\n  | WriteNode of ast * ast             (* E := E *)\n  | SequenceNode of ast * ast          (* E ; E *)\n  | UnitNode                           (* () *)\n\n\n(* string_of_ast : ast -> string *)\n(* Convertit un AST en une chaine de caractères en vue de son affichage *)\nlet rec string_of_ast tree =\n  match tree with\n  | TrueNode  -> ( \"true\")\n  | FalseNode  -> ( \"false\")\n  | (IntegerNode value) -> (string_of_int value) \n  | (AccessNode name) -> name\n  | (UnaryNode (op,expr)) -> \n     ( \"(\" ^ \n\t (match op with\n\t  | Negate -> \"- \"\n         ) ^ (string_of_ast expr) ^ \")\" )\n  | (BinaryNode (op,left,right)) -> \n     ( \"(\" ^ (string_of_ast left) ^\n\t (match op with\n\t  | Equal -> \" = \"\n\t  | Different -> \" != \"\n\t  | Lesser -> \" < \"\n\t  | Greater -> \" > \"\n\t  | LesserEqual -> \" <= \"\n\t  | GreaterEqual -> \" => \"\n\t  | Add -> \" + \"\n\t  | Substract -> \" - \"\n\t  | Or -> \" || \"\n\t  | Multiply -> \" * \"\n\t  | Divide -> \" / \"\n\t  | And -> \" && \"\n\t ) ^ (string_of_ast right) ^ \")\" ) \n  | (LetNode (id,blet,bin)) -> \n     (\"(let \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (IfthenelseNode (cond,bthen,belse)) -> \n     (\"(if \" ^ (string_of_ast cond)\n      ^ \" then \" ^ (string_of_ast bthen)\n      ^ \" else \" ^ (string_of_ast belse) ^ \")\")\n  | (FunctionNode (par,body)) -> \n     (\"(fun \" ^ par ^ \" -> \" ^ (string_of_ast body) ^ \")\")\n  | (CallNode (func,par)) -> \n     (\"((\" ^ (string_of_ast func) ^ \") \" ^ (string_of_ast par) ^ \")\") \n  | (LetrecNode (id,blet,bin)) -> \n     (\"(let rec \" ^ id ^ \" = \"\n      ^ (string_of_ast blet) ^ \" in \"\n      ^ (string_of_ast bin) ^ \")\")\n  | (RefNode exp) -> (\"(ref \" ^ (string_of_ast exp) ^ \")\")\n  | (ReadNode exp) -> (\"(! \" ^ (string_of_ast exp) ^ \")\")\n  | (WriteNode (id,exp)) -> \n     (\"(\" ^ (string_of_ast id) ^ \" := \" ^ (string_of_ast exp) ^ \")\")\n  | (SequenceNode (exp,exp2)) ->\n     (\"( \" ^ (string_of_ast exp) ^ \"; \" ^ (string_of_ast exp2) ^ \")\")\n  | UnitNode  -> ( \"()\");;\n\n"}]}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml","version":4},"contentChanges":[{"text":"(* Analyseur sémantique *)\n\nopen Ast\n\n(* ======================================================== *)\n(* Définition du type des erreurs *)\ntype errorType =\n  | UnknownIdentError of string (* Identificateur non défini *)\n  | TypeMismatchError           (* Erreur de type *)\n  | RuntimeError                (* Erreur à l'exécution *)\n  | UndefinedExpressionError    (* Expression non définie à traiter par les étudiants *)\n\n(* ======================================================== *)\n(* Définition du type des valeurs renvoyées par l'interprète *)\ntype valueType =\n  | FrozenValue of (ast * environment)        (* Fermeture fonctionnelle *)\n  | IntegerValue of int                       (* Valeur entière *)\n  | BooleanValue of bool                      (* Valeur booléenne *)\n  | ErrorValue of errorType                   (* Valeur représentant une erreur *)\nand environment = (string * valueType) list   (* Environnement d'exécution *)\n\n\n(* ========================================================*)\n(* string_of_names : string list -> string *)\n(* Converti une liste de chaînes de caractères en une seule chaîne de caractères *)\nlet string_of_names names =\n  List.fold_right (fun t tq -> t ^ \" \" ^ tq ) names \"\"\n\n(* string_of_env : environment -> string *)\n(* Convertit un environnement en une chaine de caractères en vue de son affichage *)\nlet rec string_of_env env =\n  match env with\n  | [] -> \"\"\n  | (key,value)::q -> (key ^ \",\" ^ (string_of_value value)) ^ \";\" ^ (string_of_env q)\n                    \n(* string_of_value : valueType -> string *)\n(* Convertit une valueType en une chaine de caractères en vue de son affichage *)\nand string_of_value value =\n  match value with\n  | (FrozenValue (expr,env)) -> ((string_of_ast expr) ^ (string_of_env env))\n  | (IntegerValue value) -> (string_of_int value)\n  | (BooleanValue value) -> (if (value) then \"true\" else \"false\")\n  | (ErrorValue error) -> (string_of_error error)\n                        \n(* string_of_error : errorType -> string *)\n(* Convertit une erreur en une chaine de caractères en vue de son affichage *)\nand string_of_error error =\n  match error with\n  | (UnknownIdentError name) -> \"Unknown ident : \" ^ name\n  | RuntimeError -> \"Runtime error\"\n  | TypeMismatchError -> \"Type mismatch\"\n  | UndefinedExpressionError -> \"Undefined expression error\"\n\n(* ========================================================*)\ntype 'a searchResult = \n  | NotFound \n  | Found of 'a\n\n(* lookfor : string -> environment -> valueType searchResult *)\n(* Cherche un identifiant dans un environnement et renvoie la valeur associée le cas échéant *)\nlet rec lookfor name env =\n  match env with\n  | [] -> NotFound\n  | (key,value) :: others ->\n    (if (key = name) then (Found value) else (lookfor name others))\n  \n(* ========================================================*)\n(* value_of_expr : ast -> environment -> valueType *)\n(* Fonction d'évaluation des expressions *)\nlet rec value_of_expr expr env =\n  match expr with\n  (* Partie Expression *)\n  | (TrueNode) ->  ruleTrue \n  | (FalseNode) ->  ruleFalse \n  | (IntegerNode value) ->\n     ruleInteger value\n  | (AccessNode name) ->\n     ruleAccess env name\n  | (UnaryNode (op,expr)) ->\n     ruleUnary env op expr\n  | (BinaryNode (op,left,right)) ->\n     ruleBinary env op left right\n  (* Partie Fonctionnelle *)\n  | (LetNode (ident,bvalue,bin)) ->\n     ruleLet env ident bvalue bin\n  | (IfthenelseNode (cond,bthen,belse)) ->\n     ruleIf env cond bthen belse\n  | (FunctionNode (_,_)) ->\n     ruleFunction expr env\n  | (CallNode (fexpr,pexpr)) ->\n     ruleCallByValue env fexpr pexpr\n  (*| (CallNode (fexpr,pexpr)) -> \n    ruleCallByName env fexpr pexpr *) \n  | (LetrecNode (ident,bvalue,bin)) ->\n     ruleLetrec env ident bvalue bin\n  (* Partie Impérative : à compléter *)\n  | _ -> ErrorValue UndefinedExpressionError (* les expressions avec effets de bord *)\n\n  (* ========================================================*)\n  and\n    (* ruleTrue : valueType *)\n    (* Fonction d'évaluation de true *)\n    ruleTrue = (BooleanValue true)\n             \n  (* ========================================================*)\n  and\n    (* ruleFalse : valueType *)\n    (* Fonction d'évaluation de false *)\n    ruleFalse = (BooleanValue false)\n\n  (* ========================================================*)\n  and \n    (* ruleInteger : int -> valueType *)\n    (* Fonction d'évaluation d'un entier *)\n    ruleInteger value = (IntegerValue value)\n\n  (* ========================================================*)\n  and \n    (* ruleName : environment -> string -> valueType *)\n    (* Fonction d'évaluation d'un identificateur *)\n    ruleAccess env name = \n    match (lookfor name env) with\n    | NotFound -> (ErrorValue (UnknownIdentError name))\n    (* A compléter lors de l'ajout de la fermeture pour les définitions récursives *)\n    | (Found value) -> value\n    \n  (* ========================================================*)\n  and \n    (* ruleUnary : environment -> unary -> ast- > valueType *)\n    (* Fonction d'évaluation d'un opérateur unaire *)\n    ruleUnary env op exp =\n    let value =  \n      (value_of_expr exp env) \n    in\n    match value with\n    | (ErrorValue _) as result -> result (* Propagation des erreurs *)\n    (* Vérification des types *)\n    | (IntegerValue value) ->\n       (match op with\n        | Negate -> (IntegerValue (- value)))\n    | _ -> (ErrorValue TypeMismatchError)\n                              \n  (* ========================================================*)\n  and \n    (* ruleBinary : environment -> binary -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un opérateur binaire *)\n    ruleBinary env op left right = \n    let leftvalue = \n      (value_of_expr left env) (* Evaluation du paramètre gauche *)\n    in\n    (match leftvalue with\n     | (ErrorValue _) as result -> result (* Propagation de l'erreur *)\n     | _ ->\n        (let rightvalue = \n           (value_of_expr right env) (* Evaluation du paramètre droit *)\n         in\n         (match rightvalue with\n          | (ErrorValue _) as result -> result (* Propagation de l'erreur *)\n          | _ ->\n             (match (leftvalue,rightvalue) with\n              (* Vérification des types *)\n              | ((IntegerValue leftvalue), (IntegerValue rightvalue)) -> \n                 (match op with\n                  | Equal -> (BooleanValue (leftvalue = rightvalue))\n                  | Different -> (BooleanValue (leftvalue <> rightvalue))\n                  | Lesser -> (BooleanValue (leftvalue < rightvalue))\n                  | LesserEqual -> (BooleanValue (leftvalue <= rightvalue))\n                  | Greater -> (BooleanValue (leftvalue > rightvalue))\n                  | GreaterEqual -> (BooleanValue (leftvalue >= rightvalue))\n                  | Add -> (IntegerValue (leftvalue + rightvalue))\n                  | Substract -> (IntegerValue (leftvalue - rightvalue))\n                  | Multiply -> (IntegerValue (leftvalue * rightvalue))\n                  | Divide -> \n                     (if (rightvalue = 0) then \n                        (ErrorValue RuntimeError) (* Division par zéro *)\n                      else \n                        (IntegerValue (leftvalue / rightvalue)))\n                  | _ -> (ErrorValue TypeMismatchError))\n              (* Vérification des types *)\n              | ((BooleanValue leftvalue), (BooleanValue rightvalue)) -> \n                 (match op with\n                  | Or -> (BooleanValue (leftvalue || rightvalue))\n                  | And -> (BooleanValue (leftvalue && rightvalue))\n                  | _ -> (ErrorValue TypeMismatchError))\n              | _ -> (ErrorValue TypeMismatchError)))))\n    \n  (* ========================================================*)\n  and \n    (* ruleLet : environment -> string -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un let *)\n    (* \"let ident = bvalue in bin\" *)\n    ruleLet env ident bvalue bin = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n         \n  (* ========================================================*)\n  and\n    (* ruleIf : environment -> ast -> ast -> ast- > valueType *)\n    (* Fonction d'évaluation d'une conditionnelle *)\n    (* \"if cond then bthen else belse\" *)\n    ruleIf env cond bthen belse = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n  (* ========================================================*)\n  and \n    (* ruleFunction : ast -> environment -> valueType *)\n    (* Fonction d'évaluation d'une fonction *)\n    ruleFunction expr env = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n\n  (* Appel par nom *)\n  (* ========================================================*)\n  and\n    (* ruleCallByName : environment -> ast -> ast -> valueType *)\n    (* Fonction d'évaluation d'un appel de fonction avec passage de paramètre par nom*)\n    ruleCallByName env fexpr pexpr = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n  (* ========================================================*)\n  and\n    (* ruleCallByValue : environment -> ast -> ast -> valueType *)\n    (* Fonction d'évaluation d'un appel de fonction avec passage de paramètre par valeur*)\n    ruleCallByValue env fexpr pexpr = \n    (* Appel par valeur *)\n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n  (* ========================================================*)\n  and\n    (* ruleLetrec : environment -> string -> ast- > ast -> valueType *)\n    (* Fonction d'évaluation d'un let rec*)\n    (* \"letrec ident = bvalue in bin\" *)\n    ruleLetrec env ident bvalue bin = \n    (* A compléter *)\n    (ErrorValue UndefinedExpressionError)\n    \n\n\n"}]}}
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/Semantics.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.651121139526ms
Found a `dune` file at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
]] Making a new jbuilder package at /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
=== Project root: /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student
Detected `opam` dependency manager for local use
Sending response {"id": 44, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/marc/Documents/Teaching/Repository/Marc/SVN/ens/UE/STL/TP/TP1/student/.merlin", "command": ""}}]}
